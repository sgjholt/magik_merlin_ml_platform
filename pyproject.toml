[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ml-platform"
dynamic = ["version"]
description = "A comprehensive Panel-based ML experimentation platform"
authors = [{ name = "ML Platform Team" }]
license = { text = "MIT" }
requires-python = ">=3.12"
# Core dependencies (PyCaret compatible versions)
dependencies = [
    "numpy>=1.21,<1.27",
    "pandas>=2.0,<2.2",
    "scikit-learn>=1.3,<1.5",
    "scipy>=1.9,<=1.11.4",
    "pyarrow>=12.0.0",
    "panel>=1.4.0",
    "bokeh>=3.2.0",
    "plotly>=5.15.0",
    "holoviews>=1.17.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "click>=8.1.0",
    "requests>=2.31.0",
    "mlflow>=3.1.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "ruff>=0.8.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "pytest-asyncio>=0.21.0",
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "python-semantic-release>=8.0.0",
]

# Optional cloud and ML dependencies
cloud = [
    "mlflow>=2.9.0",
    "snowflake-connector-python>=3.6.0",
    "boto3>=1.34.0",
    "redis>=5.0.0",
    "sqlalchemy>=2.0.0",
    "openpyxl>=3.1.0",
    "uvicorn>=0.25.0",
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.10.0",
]

# ML dependencies (Phase 2)
ml = [
    "pycaret>=3.3.0",
    "lightgbm>=4.0.0",
    "xgboost>=2.0.0",
    "catboost>=1.2.0",
    "imbalanced-learn>=0.11.0",
    "yellowbrick>=1.5.0",
    "shap>=0.44.0",
]

[tool.setuptools.packages.find]
where = ["src"]

# Ruff configuration
[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
# Enable comprehensive rule set
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "S",    # flake8-bandit
    "BLE",  # flake8-blind-except
    "FBT",  # flake8-boolean-trap
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "T10",  # flake8-debugger
    "EM",   # flake8-errmsg
    "FA",   # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "ICN",  # flake8-import-conventions
    "G",    # flake8-logging-format
    "INP",  # flake8-no-pep420
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest-style
    "Q",    # flake8-quotes
    "RSE",  # flake8-raise
    "RET",  # flake8-return
    "SLF",  # flake8-self
    "SLOT", # flake8-slots
    "SIM",  # flake8-simplify
    "TID",  # flake8-tidy-imports
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PD",   # pandas-vet
    "PGH",  # pygrep-hooks
    "PL",   # Pylint
    "TRY",  # tryceratops
    "FLY",  # flynt
    "PERF", # Perflint
    "FURB", # refurb
    "LOG",  # flake8-logging
    "RUF",  # Ruff-specific rules
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "ANN101",  # Missing type annotation for self
    "ANN102",  # Missing type annotation for cls
    "COM812",  # Trailing comma missing (conflicts with formatter)
    "ISC001",  # Implicit string concatenation (conflicts with formatter)
    "T201",    # Print statements (allowed in our case)
    "S101",    # Use of assert (common in tests)
    "PTH123",  # Path.open should be used instead of built-in open (not always applicable)
    "FBT001",  # Boolean positional arg in function definition
    "FBT002",  # Boolean default value in function definition
    "PLR0913", # Too many arguments in function definition
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",    # Use of assert
    "ANN",     # Type annotations not required in tests
    "PLR2004", # Magic value used in comparison
    "SLF001",  # Private member accessed
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]

# Automated Versioning with Python Semantic Release
[tool.semantic_release]
version_toml = ["pyproject.toml:project.version"]
version_variables = [
    "src/__init__.py:__version__",
]
build_command = "uv build"
dist_path = "dist/"
upload_to_pypi = false
upload_to_release = true
remove_dist = false
major_on_zero = true
commit_message = "ðŸš€ Release v{version}"

[tool.semantic_release.branches.main]
match = "(main|master)"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.changelog]
template_dir = "templates"
exclude_commit_patterns = [
    "^build:",
    "^chore:",
    "^ci:",
    "^docs:",
    "^style:",
    "^refactor:",
    "^test:",
]

[tool.semantic_release.changelog.default_templates]
changelog_file = "CHANGELOG.md"

[tool.semantic_release.commit_parser_options]
allowed_tags = [
    "build",
    "chore", 
    "ci",
    "docs",
    "feat",
    "fix",
    "perf",
    "style",
    "refactor",
    "test",
]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]

# Alternative: setuptools-scm for Git-based versioning
[tool.setuptools_scm]
write_to = "src/_version.py"
version_scheme = "python-simplified-semver"
local_scheme = "node-and-date"

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
show_error_codes = true
strict = true

[dependency-groups]
dev = [
    "python-semantic-release>=9.21.1",
    "ruff>=0.12.0",
]
